/*Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es una variable y para qu√© sirve?
    Un espacio en mem√≥ria para almacenar un valor
¬øCu√°l es la diferencia entre declarar e inicializar una variable?
    Inicializar es asignar un valor a la variable
    Declarar es dar un nombre a la variable
¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?
    Sumar se ejecuta la funci√≥n de suma
    Concatenar es la uni√≥n de strings
¬øCu√°l operador me permite sumar o concatenar?
        El operador +
*/

//Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:
//Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.
let nombre = "Nombre"; //Una string
let apellido = "Apellido"; //Una string
let usuario = "usuario"; // Nombre de usuario en Platzi string
let edad = 30; // N√∫mero Edad
let email = "test@test.com"; //Correo electr√≥nico string
let mayorEdad = 18; //Mayor de edad booelan
let dineroAhorrado =  22.0; //Dinero ahorrado numero
let deudas = 50 //Deudas e un n√∫mero

/*Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:
Nombre completo (nombre y apellido)
Dinero real (dinero ahorrado menos deudas)*/

let nombreCompleto = nombre + ' ' + apellido;
let dineroReal = dineroAhorrado -  deudas;

//************----------********* */
//Funciones
/*Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es una funci√≥n?
        Son pasos a realizar de un procedimiento espec√≠fico
¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?
        Cuansdo se tiene que ejecutar un conjunto de sentencias que realizan una tarea en espec√≠fico
¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?
        Los par√°metros son declarados dentro de la funci√≥n
        Los argumentos son pasados como par√°metros al llamar una funci√≥n
*/
        

/*Convierte el siguiente c√≥digo en una funci√≥n, pero, 
cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:

*/

const name = "Juan David";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";

console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");
function nombres(name, lastname, nickname){
    return console.log(`Mi nombre es ${completeName}, pero prefiero que me digas${nickname}`)
}

nombres("Jorge", "Sevilla", "Jorgito");

//*****Condicionales**** */
/*
Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un condicional?
    Es una condici√≥n para ejecutar una decisi√≥n
¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?
    if, else, switch
    switch.- Toma una condici√≥n a evaluar
    if.- Es para ejecutar un flujo a evaluar
¬øPuedo combinar funciones y condicionales?
    Si podemos interactuar 
*/

/*Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:
const tipoDeSuscripcion = "Basic";

switch (tipoDeSuscripcion) {
   case "Free":
       console.log("Solo puedes tomar los cursos gratis");
       break;
   case "Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
       break;
   case "Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
       break;
   case "ExpertPlus":
       console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
       break;
}*/
const tipoDeSuscripcion = "Basic";

if(tipoDeSuscripcion == 'Free'){
    console.log("Solo puedes tomar los cursos gratis");
}else if(tipoDeSuscripcion == 'Basic'){
    console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
}else if(tipoDeSuscripcion == 'Expert'){
    console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o"); 
}else if(tipoDeSuscripcion == 'ExpertPlus'){
    console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
} else{
    console.log("Sin subscripci√≥n");
}

/*Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).üí° 
*/

const tipoDeSuscripcionSinIf = "Basic";

if(tipoDeSuscripcionSinIf == 'Free'){
    console.log("Solo puedes tomar los cursos gratis");
    return;
} if(tipoDeSuscripcionSinIf == 'Basic'){
    console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
    return;
} if(tipoDeSuscripcionSinIf == 'Expert'){
    console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o"); 
    return;
}if(tipoDeSuscripcionSinIf == 'ExpertPlus'){
    console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
    return;
} 
    console.log("Sin subscripci√≥n");

/**Bonus: si ya eres una experta o experto en el lenguaje, 
te desaf√≠o a comentar c√≥mo replicar este comportamiento con arrays u objetos y un solo condicional.  */    


/*
//Con listas
var typeSuscription =["Free", "Basic", "expert", "ExpertPlus"] ;
var infoSuscription = ["Solo puedes tomar los cursos gratis", "Puedes tomar casi todos los cursos de Platzi durante un mes",
                        "Puedes tomar casi todos los cursos de Platzi durante un a√±o", "T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o"];
var userSuscription = "Expert";

for(let i = 0; i < typeSuscription.length; i++)  {
    if (userSuscription == infoSuscription[i]){
        console.log(`Si estas suscrito al plan ${typeSuscription[i]} en el cual ${infoSuscription[i]}`)
    }
}*/

//Con objetos

const typesSuscriptionsObjects = {
    free: 'Solo puedes tomar los cursos gratis',
    basic: 'Puedes tomar casi todos los cursos de Platzi durante un mes',
    expert: 'uedes tomar casi todos los cursos de Platzi durante un a√±o',
    expertplus: 'T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o',
};

function getTypesubscription(subscription){
    if(typesSuscriptionsObjects[subscription]){
        console.log(typesSuscriptionsObjects[subscription])
        return;
    }
    console.warn('No existe');
}

const typesSuscriptionsArrays = []

//***Ciclos */

/*Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un ciclo?
Es una forma de ejecutar repedidamente un pedazo de c√≥digo hasta llegar a una condici√≥n espec√≠fica

¬øQu√© tipos de ciclos existen en JavaScript?
While, do while y for.

¬øQu√© es un ciclo infinito y por qu√© es un problema?
Es una repetici√≥n infinita y puede causar problemas de falta de mem√≥ria.

¬øPuedo mezclar ciclos y condicionales?
S√≠, se puede interactuar de forma mixta
*/

/*Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:
for (let i = 0; i < 5; i++) {
    console.log("El valor de i es: " + i);
}

while (i < 5) {
    console.log("El valor de i es: " + i);
    i++;
}

for (let i = 10; i >= 2; i--) {
    console.log("El valor de i es: " + i);
}

while (i >= 2) {
    console.log("El valor de i es: " + i);
    i--;
}*/ 

/*3Ô∏è‚É£ Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es `2 + 2`. Si responden bien, mostramos un mensaje de felicitaciones, 
pero si responden mal, volvemos a empezar.
    while (respuesta != '4') {
    let pregunta = prompt('¬øCu√°nto es 2 + 2?')
    respuesta = pregunta;
}
*/

//****Listas*** */

/**
 * 1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
    ¬øQu√© es un array?
        Es una lista de elementos
    ¬øQu√© es un objeto?
        Son elementos con clave y valor 
        const obj = {
            nombre: 'Jorge', 
            edad: 37
        }
    ¬øCu√°ndo es mejor usar objetos o arrays?
        Objetos se usa cuando valores espec√≠ficos
        Cuando se tenemos que recorrer una lista
    ¬øPuedo mezclar arrays con objetos o incluso objetos con arrays?
        Si, porque los dos se pueden guardar mutuamente
2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.

        function imprimirElemento(array){
            console.log(array[0]);
        }

        imprimirElemento('Elemento1', 'Elemento2');
        Va a imprimir Elemento1

3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).

        function imprimirTodosElementosArray(array){
            for(let i = 0; i < array.length; i++){
                console.log(array[i]);
            }
        }

4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).


   //Inicializaci√≥n del objeto const obj = {
            nombre: 'Jorge', 
            edad: 37
        }

    // Funci√≥n para imprimir los elementos del objeto
    function imprimirTodosElementosObjeto(obj){
        const retorno = Object.values(obj) 
        for(let = 0; i < retorno.length; i++){
            console.log(retorno[i])
        }
    }
*/

